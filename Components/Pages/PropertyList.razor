@using PropertyListing.Interfaces
@using PropertyListing.Models;
@using static PropertyListing.Dtos.PropertyDTO;
@using PropertyListing.Dtos;

@page "/"

@inject IPropertyService PropertyService
@inject IJSRuntime JS


<div class="container">
    <h3>@TotalProperties Properties For Sale In New Zealand</h3>
    <h3>1 Bedroom Properties For Sale In New Zealand</h3>
    <div class="row mb-3">
        <div class="d-flex align-items-center p-3 border rounded shadow-sm">
            <button class="btn btn-primary d-flex align-items-center" id="btnFilter">
                <i class="bi bi-funnel-fill mr-2"></i> Filters
            </button>
            <div class="d-flex flex-wrap align-items-center filter-details ml-3" id="filterDetailsContainer">
                <span class="mx-2" id="tabDetailDisplay" data-bs-toggle="tooltip">Residential</span>
                <span class="mx-2" id="locationDetailDisplay" data-bs-toggle="tooltip">all locations</span>
                <span class="mx-2" id="priceDetailDisplay" data-bs-toggle="tooltip">any price</span>
                <span class="mx-2" id="propertyTypeDetailDisplay" data-bs-toggle="tooltip">all types</span>
                <span class="mx-2" id="bedroomDetailDisplay" data-bs-toggle="tooltip">any bed</span>
                <span class="mx-2" id="bathroomDetailDisplay" data-bs-toggle="tooltip">any bath</span>
                <span class="mx-2" id="landDetailDisplay" data-bs-toggle="tooltip">any land</span>
            </div>
        </div>
    </div>

    <div class="row">
        @foreach (var property in paginatedProperties)
        {
            var carouselId = $"carousel{property.ListingNumber}";

            <div class="col-md-4 mb-3">
                <div class="card">
                    <div id="@carouselId" class="carousel slide" data-bs-ride="false">
                        <div class="carousel-indicators">
                            @for (int i = 0; i < property.ImageUrls.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <div class="image-container position-relative">
                                        <!-- Loading Spinner -->
                                        <div class="loading-spinner" id="spinner-@i">
                                            <div class="spinner-border text-primary" role="status">
                                                <span class="visually-hidden">Loading...</span>
                                            </div>
                                        </div>
                                        <!-- Image -->
                                        <img src="@property.ImageUrls[i]" class="d-block w-100" alt="Property Image @(i + 1)"
                                             onload="hideImageSpinner(@i)">
                                    </div>
                                </div>

                                @* <button type="button" data-bs-target="#@carouselId" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="true" aria-label="Slide @(i + 1)"></button> *@
                            }
                        </div>
                        <div class="carousel-inner">
                            @for (int i = 0; i < property.ImageUrls.Count; i++)
                            {
                                <div class="carousel-item @(i == 0 ? "active" : "")">
                                    <img src="@property.ImageUrls[i]" class="d-block w-100" alt="Property Image @(i + 1)">
                                </div>
                            }
                        </div>
                        <button class="carousel-control-prev" type="button" data-bs-target="#@carouselId" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#@carouselId" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@property.StreetDisplay</h5>
                        <p class="card-text">@property.PriceDisplay</p>
                        <p class="card-text">@property.NumberOfBedrooms Bed, @property.NumberOfBathrooms Bath</p>
                    </div>
                </div>
            </div>
        }
    </div>

    <!-- Pagination Controls -->
    <div class="pagination-controls d-flex justify-content-between align-items-center mt-4">
        <p class="mb-0">
            Showing @((CurrentPage - 1) * PageSize + 1) - @(Math.Min(CurrentPage * PageSize, TotalProperties)) of @TotalProperties properties
        </p>
        <div>
            <button class="btn btn-secondary mr-2" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Previous</button>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">Next</button>
        </div>
    </div>

    <div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="filterModalLabel">Filter Properties</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <div class="property-type-tabs">
                            <button class="property-tab active" data-type="Residential">Residential</button>
                            <button class="property-tab" data-type="Rental">Rental</button>
                        </div>
                    </div>
                    <div class="form-group location-select-btn-div">
                        <button class="btn mt-3 bth-locationSelect" id="btnChooseLocation">Regions & Suburbs</button>
                    </div>
                    <div class="form-group mb-4">
                        <label for="locationInput">Location</label>
                        <div class="d-flex align-items-center">
                            <input type="text" id="locationInput" class="form-control" placeholder="Enter suburb or region" />
                        </div>
                    </div>

                    <div class="form-group mb-4 residential-filter-div">
                        <label class="form-label text-center" style="margin-left: 45%;">Price</label>
                        <div id="priceSlider" class="price-slider"></div>
                        <div class="d-flex justify-content-between mt-2">
                            <span id="minPrice">$Any min</span>
                            <span id="maxPrice">$Any max</span>
                        </div>
                    </div>

                    <div class="form-group mb-4 rental-filter-div">
                        <label class="form-label text-center" style="margin-left: 45%;">Weekly rent</label>
                        <div id="weeklyRendSlider" class="weekly-rent-slider"></div>
                        <div class="d-flex justify-content-between mt-2">
                            <span id="weeklyRentMinPrice">$Any min</span>
                            <span id="weeklyRentMaxPrice">$Any max</span>
                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label>Property types</label>
                        <div class="d-flex flex-wrap  propertyType-options-div" id="propertyTypeOptions">
                            <button class="filter-option active" data-value="All">All</button>
                            <button class="filter-option" data-value="House">House</button>
                            <button class="filter-option" data-value="Section">Section</button>
                            <button class="filter-option" data-value="Unit">Unit</button>
                            <button class="filter-option" data-value="Townhouse">Townhouse</button>
                            <button class="filter-option" data-value="Apartment">Apartment</button>
                            <button class="filter-option residenttal-filter-option" data-value="Lifestyle">Lifestyle</button>
                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label>Bedrooms</label>
                        <div class="d-flex flex-wrap bedroom-options-div" id="bedroomOptions">
                            <button class="option bedroom-option" data-value="1" title="1">1</button>
                            <button class="option bedroom-option" data-value="2" title="2">2</button>
                            <button class="option bedroom-option" data-value="3" title="3">3</button>
                            <button class="option bedroom-option" data-value="4" title="4">4</button>
                            <button class="option bedroom-option" data-value="5" title="5">5</button>
                            <button class="option bedroom-option" data-value="6" title="6+">6+</button>
                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label>Bathrooms</label>
                        <div class="d-flex flex-wrap bathroom-options-div" id="bathroomOptions">
                            <button class="option bathroom-option" data-value="1">1</button>
                            <button class="option bathroom-option" data-value="2">2</button>
                            <button class="option bathroom-option" data-value="3">3</button>
                            <button class="option bathroom-option" data-value="4">4</button>
                            <button class="option bathroom-option" data-value="5">5</button>
                            <button class="option bathroom-option" data-value="6">6+</button>
                        </div>
                    </div>

                    <div class="form-group mb-4 rental-filter-div">
                        <label>Furnished/Unfurnished</label>
                        <div class="d-flex flex-wrap gap-2" id="furnishingOptions">
                            <button class="filter-option" data-sort="Furnished">Furnished</button>
                            <button class="filter-option" data-sort="Unfurnished">Unfurnished</button>

                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label>Sort properties by</label>
                        <div class="d-flex flex-wrap gap-2" id="sortOptions">
                            <button class="filter-option active" data-sort="Newest">Newest</button>
                            <button class="filter-option" data-sort="Oldest">Oldest</button>
                            <button class="filter-option" data-sort="HighestPrice">Highest price</button>
                            <button class="filter-option" data-sort="LowestPrice">Lowest price</button>
                        </div>
                    </div>

                    <div class="form-group mb-4 residential-filter-div">
                        <label>Search only</label>
                        <div class="d-flex flex-wrap gap-2" id="viewTypeOptions">
                            <button class="filter-option">Open homes</button>
                            <button class="filter-option">Mortgagee sales</button>
                        </div>
                    </div>

                    <div class="form-group mb-4 rental-filter-div">
                        <label>Search only</label>
                        <div class="d-flex flex-wrap gap-2" id="rentalViewTypeOptions">
                            <button class="filter-option">Available Now</button>
                            <button class="filter-option">Pets allowed</button>
                        </div>
                    </div>

                    <div class="form-group mb-4">
                        <label>Keywords</label>
                        <input type="text" class="form-control" id="keywordInput" placeholder="e.g. pool, views" />
                    </div>

                    <div class="form-group mb-4 residential-filter-div">
                        <label class="form-label text-center">Land area</label>
                        <div id="landAreaSlider" class="landArea-slider"></div>
                        <div class="d-flex justify-content-between mt-2">
                            <span id="minArea">$Any min m<sup>2</sup> </span>
                            <span id="maxArea">$Any max m<sup>2</sup></span>
                        </div>
                    </div>

                    <button class="btn btn-secondary mt-3 btn-reset" id="btnResetFilters">Reset filters</button>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="OnApplyFilterClicked">Apply Filters</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Location Filter Modal -->
    <div class="modal fade" id="locationModal" tabindex="-1" aria-labelledby="locationModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <button class="btn" id="btnBack">Back</button>
                    <span id="currentLevel">Regions & Suburbs</span>
                    <button type="button" class="btn" id="btnDone">Done</button>
                </div>
                <div class="modal-body">
                    <div id="locationContainer" class="location-container">
                        <ul id="locationList"></ul>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<input type="hidden" id="PropertyListingTypeName" />
<input type="hidden" id="Locations" />
<input type="hidden" id="MinPrice" />
<input type="hidden" id="MaxPrice" />
<input type="hidden" id="PropertyTypeNames" />
<input type="hidden" id="MinBedrooms" />
<input type="hidden" id="MaxBedrooms" />
<input type="hidden" id="MinBathrooms" />
<input type="hidden" id="MaxBathrooms" />
<input type="hidden" id="SortBy" />
<input type="hidden" id="SearchBy" />
<input type="hidden" id="Keywords" />
<input type="hidden" id="MinLandArea" />
<input type="hidden" id="MaxLandArea" />


@code {
    private List<SimplePropertyDtoSummary> filteredProperties;
    private List<SimplePropertyDtoSummary> paginatedProperties;
    private int CurrentPage = 1;
    private int PageSize = 10;
    private int TotalPages = 1;
    private int TotalProperties = 0;
    private PropertySearchOptionsSummary filterDetails;

    protected override void OnInitialized()
    {
        filteredProperties = PropertyService.ListAll(filterDetails);
        TotalProperties = filteredProperties.Count;
        TotalPages = (int)Math.Ceiling((double)TotalProperties / PageSize);
        UpdatePaginatedProperties();
    }


    private void UpdatePaginatedProperties()
    {
        paginatedProperties = filteredProperties
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("initializeJavaScriptEffects");
        }
    }

    private async Task OnApplyFilterClicked()
    {
        await JS.InvokeVoidAsync("hideModal", "filterModal");
        await JS.InvokeVoidAsync("updateFilterDetailDisplay");
        //await JS.InvokeVoidAsync("getFilterDetails");

        filterDetails = await JS.InvokeAsync<PropertySearchOptionsSummary>("getFilterDetails");



        filteredProperties = PropertyService.ListAll(filterDetails);

        TotalProperties = filteredProperties.Count;
        TotalPages = (int)Math.Ceiling((double)TotalProperties / PageSize);
        CurrentPage = 1;
        UpdatePaginatedProperties();

        StateHasChanged();
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
            UpdatePaginatedProperties();
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
            UpdatePaginatedProperties();
        }
    }



}
